<#@ template language="C#" #>// <auto-generated />

#if FAT

using System;

namespace Theraot.Core
{
    internal interface IErsatz<out T>
    {
        T Result
        {
            get;
        }

        Action InvokeAction();
    }
<#
    for (var indice = 0; indice < 17; indice++)
    {#>

    [System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>: IErsatz<TReturn>
    {
        private readonly Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> _target;
        private TReturn _result;
        <# if (indice != 0) { #>private readonly <# if (indice == 1) #>T _obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>;
        private readonly <#}#>T<#=subindice#> _arg<#=subindice#><#}#>;<#}#>


        public ErsatzFunc(Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> target<# if (indice != 0) { #>, <# if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}}#>)
        {
            <# if (indice != 0) { if (indice == 1) #>_obj = obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>;
            <#}#>_arg<#=subindice#> = arg<#=subindice#><#}#>;<#}#>

            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        Action IErsatz<TReturn>.InvokeAction()
        {
            return <# if (indice != 0) {#>() => <#}#>Invoke<# if (indice != 0) { #>(<#if (indice == 1) #>_obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>,<#}#>_arg<#=subindice#><#}#>)<#}#>;
        }

        public void Invoke(<# if (indice != 0) {if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}}#>)
        {
            _result = _target.Invoke(<# if (indice != 0) { if (indice == 1) #>obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>arg<#=subindice#><#}}#>);
        }
    }
<#
    }#>}

#endif