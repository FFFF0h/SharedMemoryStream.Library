<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.IO.SharedMemory.Stream</name>
    </assembly>
    <members>
        <member name="T:System.IO.SharedMemory.SharedMemoryStream">
            <summary>
            A stream based on the memory mapped circular buffer. Allows to share data between process without lock.
            </summary>
        </member>
        <member name="M:System.IO.SharedMemory.SharedMemoryStream.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.SharedMemory.SharedMemoryStream"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="nodeCount">The node.</param>
            <param name="nodeBufferSize">Size of the buffer.</param>
        </member>
        <member name="M:System.IO.SharedMemory.SharedMemoryStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:System.IO.SharedMemory.SharedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:System.IO.SharedMemory.SharedMemoryStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:System.IO.SharedMemory.SharedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">count or offset</exception>
        </member>
        <member name="M:System.IO.SharedMemory.SharedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">count or offset</exception>
            <exception cref="T:System.IO.IOException">If there is not enougth free space to write data.</exception>
            <exception cref="T:System.OutOfMemoryException">If the underlying buffer is full.</exception>
            <exception cref="T:System.TimeoutException">If it exceed the time allowed to write data.</exception>
        </member>
        <member name="M:System.IO.SharedMemory.SharedMemoryStream.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by the <see cref="T:System.IO.Stream" />.
            </summary>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.ReadTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.
            </summary>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.WriteTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.
            </summary>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.ShuttingDown">
            <summary>
            Gets a value indicating whether this buffer is shutting down.
            </summary>
            <value>
            <c>true</c> if this buffer is shuting down; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.IsOwnerOfSharedMemory">
            <summary>
            Indicates whether this instance owns the shared memory (i.e. creator of the shared memory)
            </summary>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.NodeCount">
            <summary>
            Gets the node count of the underlying circular buffer.
            </summary>
            <value>
            The node count.
            </value>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.NodeBufferSize">
            <summary>
            Gets the size of a node of the underlying circular buffer.
            </summary>
            <value>
            The size of a node.
            </value>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.FreeNodeCount">
            <summary>
            Gets the free node count of the underlying circular buffer.
            </summary>
            <value>
            The free node count.
            </value>
        </member>
        <member name="P:System.IO.SharedMemory.SharedMemoryStream.Name">
            <summary>
            Gets the name of the stream.
            </summary>
            <value>
            The stream name.
            </value>
        </member>
        <member name="T:System.IO.SharedMemoryStreamReader`1">
            <summary>
            Wraps a <see cref="T:System.IO.SharedMemory.SharedMemoryStream"/> object and reads from it.  Deserializes binary data sent by a <see cref="T:System.IO.SharedMemoryStreamWriter`1"/>
            into a .NET CLR object specified by <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Reference type to deserialize data to</typeparam>
        </member>
        <member name="M:System.IO.SharedMemoryStreamReader`1.#ctor(System.IO.SharedMemory.SharedMemoryStream)">
            <summary>
            Constructs a new <c>SharedMemoryStreamReader</c> object that reads data from the given <paramref name="stream"/>.
            </summary>
            <param name="stream">Shared memory stream to read from</param>
        </member>
        <member name="M:System.IO.SharedMemoryStreamReader`1.Deserialize(System.Byte[])">
            <summary>
            Deserializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="T"/> is not marked as serializable.</exception>
        </member>
        <member name="M:System.IO.SharedMemoryStreamReader`1.ReadLength">
            <summary>
            Reads the length of the next message (in bytes) from the client.
            </summary>
            <returns>Number of bytes of data the client will be sending.</returns>
            <exception cref="T:System.InvalidOperationException">The shared memory stream is disconnected, waiting to connect, or the handle has not been set.</exception>
            <exception cref="T:System.IO.IOException">Any I/O error occurred.</exception>
        </member>
        <member name="M:System.IO.SharedMemoryStreamReader`1.ReadObject(System.Int32)">
            <summary>
            Reads the object of the given length.
            </summary>
            <param name="len">The length of the object to read.</param>
            <returns></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="T"/> is not marked as serializable.</exception>
        </member>
        <member name="M:System.IO.SharedMemoryStreamReader`1.ReadObject">
            <summary>
            Reads the next object from the shared memory stream. This method blocks until an object is sent
            or the shared memory stream is disconnected.
            </summary>
            <returns>The next object read from the shared memory stream, or <c>null</c> if the shared memory stream disconnected.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="T"/> is not marked as serializable.</exception>
        </member>
        <member name="M:System.IO.SharedMemoryStreamReader`1.Close">
            <summary>
            Closes this SharedMemoryStreamWriter and releases any system resources associated with the
            SharedMemoryStreamWriter. Following a call to Close, any operations on the SharedMemoryStreamWriter
            may raise exceptions. This default method is empty, but descendant
            classes can override the method to provide the appropriate
            functionality.
            </summary>
        </member>
        <member name="M:System.IO.SharedMemoryStreamReader`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:System.IO.SharedMemoryStreamReader`1.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="P:System.IO.SharedMemoryStreamReader`1.BaseStream">
            <summary>
            Gets the underlying <c>CircularBufferStream</c> object.
            </summary>
        </member>
        <member name="P:System.IO.SharedMemoryStreamReader`1.IsConnected">
            <summary>
            Gets a value indicating whether the shared memory stream is connected.
            </summary>
        </member>
        <member name="T:System.IO.SharedMemoryStreamWrapper`1">
            <summary>
            Wraps a <see cref="T:System.IO.SharedMemory.SharedMemoryStream"/> object to read and write .NET CLR objects.
            </summary>
            <typeparam name="TReadWrite">Reference type to read from and write to the pipe</typeparam>
        </member>
        <member name="T:System.IO.SharedMemoryStreamWrapper`2">
            <summary>
            Wraps a <see cref="T:System.IO.SharedMemory.SharedMemoryStream"/> object to read and write .NET CLR objects.
            </summary>
            <typeparam name="TRead">Reference type to <b>read</b> from the stream</typeparam>
            <typeparam name="TWrite">Reference type to <b>write</b> to the stream</typeparam>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWrapper`2.#ctor(System.IO.SharedMemory.SharedMemoryStream)">
            <summary>
            Constructs a new <c>SharedMemoryStreamWrapper</c> object that reads from and writes to the given <paramref name="stream"/>.
            </summary>
            <param name="stream">Shared memory stream to read from and write to</param>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWrapper`2.ReadObject">
            <summary>
            Reads the next object from the shared memory stream. This method blocks until an object is sent
            or the stream is disconnected.
            </summary>
            <returns>The next object read from the shared memory stream, or <c>null</c> if the shared memory stream disconnected.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="TRead"/> is not marked as serializable.</exception>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWrapper`2.WriteObject(`1)">
            <summary>
            Writes an object to the shared memory stream. This method blocks until all data is sent.
            </summary>
            <param name="obj">Object to write to the shared memory stream</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="TRead"/> is not marked as serializable.</exception>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWrapper`2.WaitForSharedMemoryDrain">
            <summary>
                Waits for the other end of the shared memory stream to read all sent bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The shared memory stream is closed.</exception>
            <exception cref="T:System.NotSupportedException">The shared memory stream does not support write operations.</exception>
            <exception cref="T:System.IO.IOException">The shared memory stream is broken or another I/O error occurred.</exception>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWrapper`2.Close">
            <summary>
                Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="P:System.IO.SharedMemoryStreamWrapper`2.BaseStream">
            <summary>
            Gets the underlying <c>CircularBufferStream</c> object.
            </summary>
        </member>
        <member name="P:System.IO.SharedMemoryStreamWrapper`2.IsConnected">
            <summary>
                Gets a value indicating whether the <see cref="P:System.IO.SharedMemoryStreamWrapper`2.BaseStream"/> object is connected or not.
            </summary>
            <returns>
                <c>true</c> if the <see cref="P:System.IO.SharedMemoryStreamWrapper`2.BaseStream"/> object is connected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:System.IO.SharedMemoryStreamWrapper`2.CanRead">
            <summary>
                Gets a value indicating whether the current stream supports read operations.
            </summary>
            <returns>
                <c>true</c> if the stream supports read operations; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:System.IO.SharedMemoryStreamWrapper`2.CanWrite">
            <summary>
                Gets a value indicating whether the current stream supports write operations.
            </summary>
            <returns>
                <c>true</c> if the stream supports write operations; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWrapper`1.#ctor(System.IO.SharedMemory.SharedMemoryStream)">
            <summary>
            Constructs a new <c>SharedMemoryStreamWrapper</c> object that reads from and writes to the given <paramref name="stream"/>.
            </summary>
            <param name="stream">Stream to read from and write to</param>
        </member>
        <member name="T:System.IO.SharedMemoryStreamWriter`1">
            <summary>
            Wraps a <see cref="T:System.IO.SharedMemory.SharedMemoryStream"/> object and writes to it. Serializes .NET CLR objects specified by <typeparamref name="T"/>
            into binary form and writes them into a shared memory for a <see cref="T:System.IO.SharedMemoryStreamReader`1"/> to read and deserialize.
            </summary>
            <typeparam name="T">Reference type to serialize</typeparam>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWriter`1.#ctor(System.IO.SharedMemory.SharedMemoryStream)">
            <summary>
            Constructs a new <c>SharedMemoryStreamWriter</c> object that writes to given <paramref name="stream"/>.
            </summary>
            <param name="stream">Shared memory tream to write to</param>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWriter`1.Serialize(`0)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="T"/> is not marked as serializable.</exception>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWriter`1.CalculateNodeToUse(System.Int32)">
            <summary>
            Calculates the number of nodes to use.
            </summary>
            <param name="realSize">Size of the object.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWriter`1.Flush">
            <summary>
            Clears all buffers for this SharedMemoryStreamWriter and causes any buffered data to be
            written to the underlying device. This default method is empty, but
            descendant classes can override the method to provide the appropriate
            functionality.
            </summary>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWriter`1.TryWriteObject(`0,System.Int32@)">
            <summary>
            Tries to write an object to the shared memory stream.
            </summary>
            <param name="obj">Object to write to the shared memory stream</param>
            <param name="nodeCount">The node count.</param>
            <returns>
            True if the writes occured; otherwise false.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="T"/> is not marked as serializable.</exception>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWriter`1.TryWriteObject(`0)">
            <summary>
            Tries to write an object to the shared memory stream.
            </summary>
            <param name="obj">Object to write to the shared memory stream</param>
            <returns>
            True if the writes occured; otherwise false.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="T"/> is not marked as serializable.</exception>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWriter`1.WriteObject(`0)">
            <summary>
            Writes an object to the shared memory stream. This method blocks until all data is sent.
            </summary>
            <param name="obj">Object to write to the shared memory stream</param>
            <exception cref="T:System.IO.IOException">Unable to write data into the stream, there is not enougth free space.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="T"/> is not marked as serializable.</exception>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWriter`1.Close">
            <summary>
            Closes this SharedMemoryStreamWriter and releases any system resources associated with the
            SharedMemoryStreamWriter. Following a call to Close, any operations on the SharedMemoryStreamWriter
            may raise exceptions. This default method is empty, but descendant
            classes can override the method to provide the appropriate
            functionality.
            </summary>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWriter`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:System.IO.SharedMemoryStreamWriter`1.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="P:System.IO.SharedMemoryStreamWriter`1.BaseStream">
            <summary>
            Gets the underlying <c>CircularBufferStream</c> object.
            </summary>
        </member>
        <member name="T:System.Threading.DynamicSpin">
            <summary>
            Provides atomic dynamic interlocked spin.
            </summary>
        </member>
        <member name="M:System.Threading.DynamicSpin.Acquire(System.String,System.Int32)">
            <summary>
            Waits until available and then acquires the given spin name.
            </summary>
            <param name="spinName">Name of the spin.</param>
            <param name="timeout">The timeout.</param>
            <returns>Returns true if the spin has been acquired before timeout; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.DynamicSpin.Release(System.String)">
            <summary>
            Releases the specified spin.
            </summary>
            <param name="spinName">Name of the spin.</param>
        </member>
        <member name="M:System.Threading.DynamicSpin.ReleaseAll">
            <summary>
            Releases all spins.
            </summary>
        </member>
        <member name="M:System.Threading.DynamicSpin.CompareExchange(System.String,System.Boolean,System.Boolean)">
            <summary>
            For the given key, compares two 32-bit signed integers for equality and, if they are equal,
            replaces one of the values.
            </summary>
            <param name="key">The destination key, whose value is compared with comparand and possibly replaced.</param>
            <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
            <param name="comparand">The value that is compared to the value at key location.</param>
            <returns>The original value in the key.</returns>
        </member>
    </members>
</doc>
